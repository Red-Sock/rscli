package patterns

import (
	"errors"
	"fmt"
	"os"
	"strings"
)

// Priority of configuration
// 1. If config is provided in ./config/config.yaml
//       OR by passing path to it via -c=path_to_config.yaml
//       OR by passing path to it via {{projectNAME_}}_CONFIG_PATH
// values from it is used
// 2. If not, values from environment that starts with {{projectNAME_}} are used
//
// P.S Ways 1 and 2 may be combined with priority to ENV values 'cause they more secure

const (
	pathToConfigFlag     = "-c"
	pathToConfigFlagLong = "--config-path"

	defaultConfigPath = "./config/config.yaml"
)

const (
	AppName    = "projectNAME" // prefix for environment variables
	ConfigPath = "{{projectNAME_}}CONFIG_PATH"
)

type Config struct {
}

func New() (*Config, error) {

	envPath, values := tryParseEnv()

	pathFlag, err := tryParseFlag()
	if err != nil {
		return nil, fmt.Errorf("error parsing flags %s", err)
	}


	return &Config{}, nil
}

func tryParseFlag() (string, error) {
	for _, v := range os.Args[1:] {
		switch v {
		case pathToConfigFlagLong, pathToConfigFlag:
			flagAndArg := strings.Split(v, "=")
			if len(flagAndArg) != 2 {
				return "", errors.New("flag and arguments amount is invalid. Correct way of changing config: -c=/path/to/config.yaml")
			}
			return flagAndArg[1], nil
		}
	}
	return "", nil
}

func tryParseEnv() (string, map[string]interface{}) {
	cfgPath, _ := os.LookupEnv(ConfigPath)

	%s

	return cfgPath, out, nil
}
