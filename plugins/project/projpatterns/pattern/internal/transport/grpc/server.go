// Code generated by RedSock CLI

package grpc

import (
	"context"
	"net"

	"github.com/godverv/matreshka/api"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"

	"proj_name/internal/config"
)

type GrpcServer struct {
	srv *grpc.Server

	networkType string
	address     string
}

func NewServer(cfg config.Config, server *api.GRPC) *GrpcServer {
	srv := grpc.NewServer()

	// Register your servers here

	return &GrpcServer{
		srv:         srv,
		networkType: "tcp",
		address:     "0.0.0.0:" + server.GetPortStr(),
	}
}

func (s *GrpcServer) Start(_ context.Context) error {
	lis, err := net.Listen(s.networkType, s.address)
	if err != nil {
		return errors.Wrapf(err, "error when tried to listen for %s, %s", s.networkType, s.address)
	}

	err = s.srv.Serve(lis)
	if err != nil {
		return errors.Wrap(err, "error serving grpc")
	}

	logrus.Infof("GRPC Server started at %s (%s)", s.address, s.networkType)
	return nil
}

func (s *GrpcServer) Stop(_ context.Context) error {
	logrus.Infof("Stopping GRPC server at %s", s.address)
	s.srv.GracefulStop()
	logrus.Infof("GRPC server at %s is stopped", s.address)
	return nil
}
