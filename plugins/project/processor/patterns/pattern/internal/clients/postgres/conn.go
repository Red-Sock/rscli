// Code generated by rscli. DO NOT EDIT.

package postgres

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"

	"github.com/pressly/goose/v3"

	_ "github.com/jackc/pgx/v5/stdlib"

	"financial-microservice/internal/config"
	"financial-microservice/internal/utils/closer"
)

func New(ctx context.Context, cfg *config.Config) (*pgx.Conn, error) {
	conbStr := createConnectionString(cfg)

	conn, err := pgx.Connect(ctx, conbStr)
	if err != nil {
		return nil, errors.Wrap(err, "error checking connection to redis")
	}

	closer.Add(func() error {
		return conn.Close(ctx)
	})

	err = checkMigrate(conbStr)
	if err != nil {
		return nil, errors.Wrap(err, "error checking migrations")
	}

	return conn, nil
}

func createConnectionString(cfg *config.Config) string {
	return fmt.Sprintf("postgresql://%s:%s@%s:%s/%s",
		cfg.GetString(config.DataSourcesPostgresUser),
		cfg.GetString(config.DataSourcesPostgresPwd),
		cfg.GetString(config.DataSourcesPostgresHost),
		cfg.GetString(config.DataSourcesPostgresPort),
		cfg.GetString(config.DataSourcesPostgresName),
	)
}

func checkMigrate(connString string) error {
	conn, err := goose.OpenDBWithDriver("pgx", connString)
	if err != nil {
		return errors.Wrap(err, "error opening pg db connection")
	}

	goose.SetLogger(logrus.StandardLogger())

	err = goose.Up(conn, "./migrations")
	if err != nil {
		return errors.Wrap(err, "error performing up")
	}

	return nil
}
