// Code generated by RedSock CLI. DO NOT EDIT.

package app

import (
	"github.com/Red-Sock/toolbox"
	"github.com/Red-Sock/toolbox/closer"
	errors "github.com/Red-Sock/trace-errors"
	"github.com/sirupsen/logrus"
	"golang.org/x/net/context"{{ range $key, $value := .Imports }}
    {{ $value }} "{{ $key }}"{{ end }}
	"proj_name/internal/config"
)

type App struct {
	Ctx  context.Context
	Stop func()
	Cfg  config.Config{{ range .AppContent }}
    {{ if .Comment}} {{.Comment}} {{end}}{{ range .Fields }}
    {{ .Key }} {{ .Value }}{{ end }}{{ end }}

	Custom Custom
}

func New() (app App, err error) {
	logrus.Println("starting app")

	err = app.InitConfig()
	if err != nil {
		return App{}, errors.Wrap(err, "error initializing config")
	}
	{{ range .AppContent }}
	err = app.{{ .InitFunc }}()
	if err != nil {
        return App{}, errors.Wrap(err, "{{ .InitFuncErrorMessage }}")
    }
	{{ end }}

	err = app.Custom.Init(app)
	if err != nil {
		return App{}, errors.Wrap(err, "error initializing custom app properties")
	}

	return app, nil
}

func (a *App) Start() (err error) { {{ range .Starters }}
	err = a.{{.FieldName }}.{{ if .StartCall }}{{.StartCall}}{{ else }}Start{{ end }}()
 	if err != nil {
        return errors.Wrap(err, "error starting Server manager")
    }
    closer.Add(func() error { return a.{{.FieldName }}.{{ if .StopCall }}{{.StopCall}}{{ else }}Stop{{ end }}() }) {{ end }}
	toolbox.WaitForInterrupt()

	logrus.Println("shutting down the app")

	err = closer.Close()
	if err != nil {
		return errors.Wrap(err, "error while shutting down application")
	}

	return nil
}

