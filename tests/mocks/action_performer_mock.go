package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Red-Sock/rscli/plugins/project"
	"github.com/gojuno/minimock/v3"
)

// ActionPerformerMock implements actions.ActionPerformer
type ActionPerformerMock struct {
	t minimock.Tester

	funcTidy          func(proj project.IProject) (err error)
	inspectFuncTidy   func(proj project.IProject)
	afterTidyCounter  uint64
	beforeTidyCounter uint64
	TidyMock          mActionPerformerMockTidy
}

// NewActionPerformerMock returns a mock for actions.ActionPerformer
func NewActionPerformerMock(t minimock.Tester) *ActionPerformerMock {
	m := &ActionPerformerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.TidyMock = mActionPerformerMockTidy{mock: m}
	m.TidyMock.callArgs = []*ActionPerformerMockTidyParams{}

	return m
}

type mActionPerformerMockTidy struct {
	mock               *ActionPerformerMock
	defaultExpectation *ActionPerformerMockTidyExpectation
	expectations       []*ActionPerformerMockTidyExpectation

	callArgs []*ActionPerformerMockTidyParams
	mutex    sync.RWMutex
}

// ActionPerformerMockTidyExpectation specifies expectation struct of the ActionPerformer.Tidy
type ActionPerformerMockTidyExpectation struct {
	mock    *ActionPerformerMock
	params  *ActionPerformerMockTidyParams
	results *ActionPerformerMockTidyResults
	Counter uint64
}

// ActionPerformerMockTidyParams contains parameters of the ActionPerformer.Tidy
type ActionPerformerMockTidyParams struct {
	proj project.IProject
}

// ActionPerformerMockTidyResults contains results of the ActionPerformer.Tidy
type ActionPerformerMockTidyResults struct {
	err error
}

// Expect sets up expected params for ActionPerformer.Tidy
func (mmTidy *mActionPerformerMockTidy) Expect(proj project.IProject) *mActionPerformerMockTidy {
	if mmTidy.mock.funcTidy != nil {
		mmTidy.mock.t.Fatalf("ActionPerformerMock.Tidy mock is already set by Set")
	}

	if mmTidy.defaultExpectation == nil {
		mmTidy.defaultExpectation = &ActionPerformerMockTidyExpectation{}
	}

	mmTidy.defaultExpectation.params = &ActionPerformerMockTidyParams{proj}
	for _, e := range mmTidy.expectations {
		if minimock.Equal(e.params, mmTidy.defaultExpectation.params) {
			mmTidy.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTidy.defaultExpectation.params)
		}
	}

	return mmTidy
}

// Inspect accepts an inspector function that has same arguments as the ActionPerformer.Tidy
func (mmTidy *mActionPerformerMockTidy) Inspect(f func(proj project.IProject)) *mActionPerformerMockTidy {
	if mmTidy.mock.inspectFuncTidy != nil {
		mmTidy.mock.t.Fatalf("Inspect function is already set for ActionPerformerMock.Tidy")
	}

	mmTidy.mock.inspectFuncTidy = f

	return mmTidy
}

// Return sets up results that will be returned by ActionPerformer.Tidy
func (mmTidy *mActionPerformerMockTidy) Return(err error) *ActionPerformerMock {
	if mmTidy.mock.funcTidy != nil {
		mmTidy.mock.t.Fatalf("ActionPerformerMock.Tidy mock is already set by Set")
	}

	if mmTidy.defaultExpectation == nil {
		mmTidy.defaultExpectation = &ActionPerformerMockTidyExpectation{mock: mmTidy.mock}
	}
	mmTidy.defaultExpectation.results = &ActionPerformerMockTidyResults{err}
	return mmTidy.mock
}

// Set uses given function f to mock the ActionPerformer.Tidy method
func (mmTidy *mActionPerformerMockTidy) Set(f func(proj project.IProject) (err error)) *ActionPerformerMock {
	if mmTidy.defaultExpectation != nil {
		mmTidy.mock.t.Fatalf("Default expectation is already set for the ActionPerformer.Tidy method")
	}

	if len(mmTidy.expectations) > 0 {
		mmTidy.mock.t.Fatalf("Some expectations are already set for the ActionPerformer.Tidy method")
	}

	mmTidy.mock.funcTidy = f
	return mmTidy.mock
}

// When sets expectation for the ActionPerformer.Tidy which will trigger the result defined by the following
// Then helper
func (mmTidy *mActionPerformerMockTidy) When(proj project.IProject) *ActionPerformerMockTidyExpectation {
	if mmTidy.mock.funcTidy != nil {
		mmTidy.mock.t.Fatalf("ActionPerformerMock.Tidy mock is already set by Set")
	}

	expectation := &ActionPerformerMockTidyExpectation{
		mock:   mmTidy.mock,
		params: &ActionPerformerMockTidyParams{proj},
	}
	mmTidy.expectations = append(mmTidy.expectations, expectation)
	return expectation
}

// Then sets up ActionPerformer.Tidy return parameters for the expectation previously defined by the When method
func (e *ActionPerformerMockTidyExpectation) Then(err error) *ActionPerformerMock {
	e.results = &ActionPerformerMockTidyResults{err}
	return e.mock
}

// Tidy implements actions.ActionPerformer
func (mmTidy *ActionPerformerMock) Tidy(proj project.IProject) (err error) {
	mm_atomic.AddUint64(&mmTidy.beforeTidyCounter, 1)
	defer mm_atomic.AddUint64(&mmTidy.afterTidyCounter, 1)

	if mmTidy.inspectFuncTidy != nil {
		mmTidy.inspectFuncTidy(proj)
	}

	mm_params := &ActionPerformerMockTidyParams{proj}

	// Record call args
	mmTidy.TidyMock.mutex.Lock()
	mmTidy.TidyMock.callArgs = append(mmTidy.TidyMock.callArgs, mm_params)
	mmTidy.TidyMock.mutex.Unlock()

	for _, e := range mmTidy.TidyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmTidy.TidyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTidy.TidyMock.defaultExpectation.Counter, 1)
		mm_want := mmTidy.TidyMock.defaultExpectation.params
		mm_got := ActionPerformerMockTidyParams{proj}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTidy.t.Errorf("ActionPerformerMock.Tidy got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTidy.TidyMock.defaultExpectation.results
		if mm_results == nil {
			mmTidy.t.Fatal("No results are set for the ActionPerformerMock.Tidy")
		}
		return (*mm_results).err
	}
	if mmTidy.funcTidy != nil {
		return mmTidy.funcTidy(proj)
	}
	mmTidy.t.Fatalf("Unexpected call to ActionPerformerMock.Tidy. %v", proj)
	return
}

// TidyAfterCounter returns a count of finished ActionPerformerMock.Tidy invocations
func (mmTidy *ActionPerformerMock) TidyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTidy.afterTidyCounter)
}

// TidyBeforeCounter returns a count of ActionPerformerMock.Tidy invocations
func (mmTidy *ActionPerformerMock) TidyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTidy.beforeTidyCounter)
}

// Calls returns a list of arguments used in each call to ActionPerformerMock.Tidy.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTidy *mActionPerformerMockTidy) Calls() []*ActionPerformerMockTidyParams {
	mmTidy.mutex.RLock()

	argCopy := make([]*ActionPerformerMockTidyParams, len(mmTidy.callArgs))
	copy(argCopy, mmTidy.callArgs)

	mmTidy.mutex.RUnlock()

	return argCopy
}

// MinimockTidyDone returns true if the count of the Tidy invocations corresponds
// the number of defined expectations
func (m *ActionPerformerMock) MinimockTidyDone() bool {
	for _, e := range m.TidyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TidyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTidyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTidy != nil && mm_atomic.LoadUint64(&m.afterTidyCounter) < 1 {
		return false
	}
	return true
}

// MinimockTidyInspect logs each unmet expectation
func (m *ActionPerformerMock) MinimockTidyInspect() {
	for _, e := range m.TidyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ActionPerformerMock.Tidy with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TidyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTidyCounter) < 1 {
		if m.TidyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ActionPerformerMock.Tidy")
		} else {
			m.t.Errorf("Expected call to ActionPerformerMock.Tidy with params: %#v", *m.TidyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTidy != nil && mm_atomic.LoadUint64(&m.afterTidyCounter) < 1 {
		m.t.Error("Expected call to ActionPerformerMock.Tidy")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ActionPerformerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockTidyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ActionPerformerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ActionPerformerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockTidyDone()
}
